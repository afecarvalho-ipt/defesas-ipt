// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Schedules.Data;

namespace Schedules.Migrations
{
    [DbContext(typeof(SchedulesDb))]
    [Migration("20190922181802_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Schedules.Data.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("MaxStudentsPerSlot");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Schedules.Data.ScheduleSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CompletedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<DateTime>("EndsAt");

                    b.Property<bool>("IsAvailable");

                    b.Property<DateTime?>("ReservedAt");

                    b.Property<string>("ReservedBy_Id");

                    b.Property<long>("Schedule_Id");

                    b.Property<DateTime>("StartsAt");

                    b.HasKey("Id");

                    b.HasIndex("ReservedBy_Id");

                    b.HasIndex("Schedule_Id");

                    b.ToTable("ScheduleSlots");
                });

            modelBuilder.Entity("Schedules.Data.ScheduleSlot_Student", b =>
                {
                    b.Property<long>("ScheduleSlot_Id");

                    b.Property<string>("Student_Id");

                    b.HasKey("ScheduleSlot_Id", "Student_Id");

                    b.HasIndex("Student_Id");

                    b.ToTable("ScheduleSlot_Student");
                });

            modelBuilder.Entity("Schedules.Data.Schedule_Student", b =>
                {
                    b.Property<string>("Student_Id");

                    b.Property<long>("Schedule_Id");

                    b.HasKey("Student_Id", "Schedule_Id");

                    b.HasIndex("Schedule_Id");

                    b.ToTable("Schedule_Student");
                });

            modelBuilder.Entity("Schedules.Data.Student", b =>
                {
                    b.Property<string>("StudentNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("StudentNumber");

                    b.HasIndex("StudentNumber")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Schedules.Data.ScheduleSlot", b =>
                {
                    b.HasOne("Schedules.Data.Student", "ReservedBy")
                        .WithMany("SlotsReservedByThisStudent")
                        .HasForeignKey("ReservedBy_Id");

                    b.HasOne("Schedules.Data.Schedule", "Schedule")
                        .WithMany("Slots")
                        .HasForeignKey("Schedule_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Schedules.Data.ScheduleSlot_Student", b =>
                {
                    b.HasOne("Schedules.Data.ScheduleSlot", "ScheduleSlot")
                        .WithMany("Students")
                        .HasForeignKey("ScheduleSlot_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Schedules.Data.Student", "Student")
                        .WithMany("Slots")
                        .HasForeignKey("Student_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Schedules.Data.Schedule_Student", b =>
                {
                    b.HasOne("Schedules.Data.Schedule", "Schedule")
                        .WithMany("Students")
                        .HasForeignKey("Schedule_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Schedules.Data.Student", "Student")
                        .WithMany("Schedules")
                        .HasForeignKey("Student_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
